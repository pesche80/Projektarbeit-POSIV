
%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\yanni_000\Dropbox\Projektarbeit_Schaetzung-der-Haltung-eines-Flugzeuges\40_Matlab\SensorData_v2_0_0\x_Axis.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2014/10/14 22:32:37

function [time x_Axis y_Axis z_Axis p q r]  = ImportSensorData()
    %% Import Time
    %% Initialize variables.
    filename = 'SensorData_v2_0_0\dt.csv';
    delimiter = '';

    %% Format string for each line of text:
    %   column1: double (%f)
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%f%[^\n\r]';

    %% Open the text file.
    fileID = fopen(filename,'r');

    %% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);

    %% Close the text file.
    fclose(fileID);

    %% Post processing for unimportable data.
    % No unimportable data rules were applied during the import, so no post
    % processing code is included. To generate code which works for
    % unimportable data, select unimportable cells in a file and regenerate the
    % script.

    %% Allocate imported array to column variable names
    time = dataArray{:, 1};

    %% Clear temporary variables
    clearvars filename delimiter formatSpec fileID dataArray ans;

    %% Import x_Axis
    %% Initialize variables.
    filename = 'SensorData_v2_0_0\x_Axis.csv';
    delimiter = '';

    %% Format string for each line of text:
    %   column1: double (%f)
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%f%[^\n\r]';

    %% Open the text file.
    fileID = fopen(filename,'r');

    %% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);

    %% Close the text file.
    fclose(fileID);

    %% Post processing for unimportable data.
    % No unimportable data rules were applied during the import, so no post
    % processing code is included. To generate code which works for
    % unimportable data, select unimportable cells in a file and regenerate the
    % script.

    %% Allocate imported array to column variable names
    x_Axis = dataArray{:, 1};

    %% Clear temporary variables
    clearvars filename delimiter formatSpec fileID dataArray ans;

    %% Import y_Axis
    %% Initialize variables.
    filename = 'SensorData_v2_0_0\y_Axis.csv';
    delimiter = '';

    %% Format string for each line of text:
    %   column1: double (%f)
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%f%[^\n\r]';

    %% Open the text file.
    fileID = fopen(filename,'r');

    %% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);

    %% Close the text file.
    fclose(fileID);

    %% Post processing for unimportable data.
    % No unimportable data rules were applied during the import, so no post
    % processing code is included. To generate code which works for
    % unimportable data, select unimportable cells in a file and regenerate the
    % script.

    %% Allocate imported array to column variable names
    y_Axis = dataArray{:, 1};

    %% Clear temporary variables
    clearvars filename delimiter formatSpec fileID dataArray ans;

    %% Import z_Axis
    %% Initialize variables.
    filename = 'SensorData_v2_0_0\z_Axis.csv';
    delimiter = '';

    %% Format string for each line of text:
    %   column1: double (%f)
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%f%[^\n\r]';

    %% Open the text file.
    fileID = fopen(filename,'r');

    %% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);

    %% Close the text file.
    fclose(fileID);

    %% Post processing for unimportable data.
    % No unimportable data rules were applied during the import, so no post
    % processing code is included. To generate code which works for
    % unimportable data, select unimportable cells in a file and regenerate the
    % script.

    %% Allocate imported array to column variable names
    z_Axis = dataArray{:, 1};

    %% Clear temporary variables
    clearvars filename delimiter formatSpec fileID dataArray ans;
    
    
        %% Import p
    %% Initialize variables.
    filename = 'SensorData_v2_0_0\p.csv';
    delimiter = '';

    %% Format string for each line of text:
    %   column1: double (%f)
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%f%[^\n\r]';

    %% Open the text file.
    fileID = fopen(filename,'r');

    %% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);

    %% Close the text file.
    fclose(fileID);

    %% Post processing for unimportable data.
    % No unimportable data rules were applied during the import, so no post
    % processing code is included. To generate code which works for
    % unimportable data, select unimportable cells in a file and regenerate the
    % script.

    %% Allocate imported array to column variable names
    p = dataArray{:, 1};

    %% Clear temporary variables
    clearvars filename delimiter formatSpec fileID dataArray ans;
    
    
        %% Import z_Axis
    %% Initialize variables.
    filename = 'SensorData_v2_0_0\q.csv';
    delimiter = '';

    %% Format string for each line of text:
    %   column1: double (%f)
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%f%[^\n\r]';

    %% Open the text file.
    fileID = fopen(filename,'r');

    %% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);

    %% Close the text file.
    fclose(fileID);

    %% Post processing for unimportable data.
    % No unimportable data rules were applied during the import, so no post
    % processing code is included. To generate code which works for
    % unimportable data, select unimportable cells in a file and regenerate the
    % script.

    %% Allocate imported array to column variable names
    q = dataArray{:, 1};

    %% Clear temporary variables
    clearvars filename delimiter formatSpec fileID dataArray ans;
    
        %% Import z_Axis
    %% Initialize variables.
    filename = 'SensorData_v2_0_0\r.csv';
    delimiter = '';

    %% Format string for each line of text:
    %   column1: double (%f)
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%f%[^\n\r]';

    %% Open the text file.
    fileID = fopen(filename,'r');

    %% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);

    %% Close the text file.
    fclose(fileID);

    %% Post processing for unimportable data.
    % No unimportable data rules were applied during the import, so no post
    % processing code is included. To generate code which works for
    % unimportable data, select unimportable cells in a file and regenerate the
    % script.

    %% Allocate imported array to column variable names
    r = dataArray{:, 1};

    %% Clear temporary variables
    clearvars filename delimiter formatSpec fileID dataArray ans;
    
    
    
end
